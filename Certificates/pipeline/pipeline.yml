trigger:
- main

parameters:
- name: certificateName
  displayName: Certificate Name
  type: string
  default: 'myCertificate'

- name: subjectCN
  displayName: Subject Common Name
  type: string
  default: 'CN=myCertificate'

pool:
  vmImage: 'ubuntu-latest'

variables:
  terraformVersion: 'latest'
  serviceConnection: 'yourAzureServiceConnectionName'
  keyVaultName: 'yourKeyVaultName'
  resourceGroupName: 'yourResourceGroupName'

stages:
- stage: Terraform
  jobs:
  - job: TerraformInitApply
    displayName: 'Initialize and Apply Terraform'
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: $(terraformVersion)

    - task: TerraformCLI@0
      displayName: 'Terraform Init'
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        backendType: 'azurerm'
        backendServiceArm: $(serviceConnection)
        ensureBackend: true

    - task: TerraformCLI@0
      displayName: 'Terraform Apply'
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        environmentServiceName: $(serviceConnection)
        commandOptions: '-auto-approve -var "certificate_name=${{ parameters.certificateName }}" -var "subject_cn=${{ parameters.subjectCN }}"'

  - job: ExtractCertificatePublicKey
    displayName: 'Extract Certificate Public Key'
    steps:
    - script: |
        echo "Extracting public key from certificate in Key Vault..."
        az login --service-principal -u $(clientId) -p $(clientSecret) --tenant $(tenantId)
        az keyvault certificate download --vault-name $(keyVaultName) --name {{ parameters.certificateName }} --file publickey.pem
        public_key=$(cat publickey.pem | base64 -w 0)
        echo "Public Key: $public_key"

      displayName: 'Extract and Output Public Key'
      env:
        clientId: $(serviceConnectionClientId)
        clientSecret: $(serviceConnectionClientSecret)
        tenantId: $(serviceConnectionTenantId)

